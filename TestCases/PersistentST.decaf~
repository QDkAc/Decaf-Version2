class Main {
	static int rand(int p){
		return 17*p*p+131*p+45;
	}
	
	static int get(int p,int N){
		 p = p % N;
		 if(p < 0){
		 	 p = p + N;
		 }
		 return p;
	}

    static void main() {
    	int n;
    	int[] arr;
    	int V;
    	
    	V = 100000;
    	n = 1000;
    	arr = new int[n];
    	int i;
    	
    	int p;
    	p=199581;
    	
    	for(i=0;i<n;i=i+1){
    		arr[i] = get(p,V);
    		p = rand(p);
    	}
    	
    	class Node t;
    	t = new Node();
    	t.init(0,n,arr);
    	
    	for(i=0;i<1000*n;i=i+1){
    		//query
    		int l;
    		int r;
    		l = get(p,n);
    		p = rand(p);
    		r = get(p,n);
    		p = rand(p);
    		
    		if(l>r){
    			int tmp;
    			tmp = l;l = r;r = tmp;
    		}
    		
    		Print(t.query(l,r+1));
    		Print("\n");
    		
    		//change
    		int at;
    		at = get(p,n);
    		p = rand(p);
    		int v;
    		v  = get(p,V);
    		t = t.change(at,v);
    	}
    }
}

//persistent segment tree for querying range max
//all numbers are >=0
class Node{
	class Node pl;
	class Node pr;
	int l;
	int r;
	int mx;
	//[l,r]
	
	void set(int l,int r){
		this.l = l;
		this.r = r;
	}
	
	void update(){
		mx = pl.mx>pr.mx?pl.mx:pr.mx;	
	}
	
	void init(int l,int r,int[] arr){
		set(l,r);
		if(l+1==r){
			mx = arr[l];
			return;
		}
		pl = new Node();
		pr = new Node();
		int m;
		m = (l+r)/2;
		pl.init(l,m,arr);
		pr.init(m,r,arr);
		update();
	}
	
	int query(int L,int R){
		if(L<=l&&R>=r){
			return mx;
		}
		if(l>=R||L>=r){
			return -1;
		}
		int a;
		a = pl.query(L,R);
		int b;
		b = pr.query(L,R);
		return a>b?a:b;
	}
	
	class Node change(int at,int newv){
		if(at<l||at>=r){
			return this;
		}
	
		class Node t;
		t = new Node();
		t.set(l,r);
	
		if(l+1==r){
			t.mx = newv;
			return t;
		}
		t.pl = pl.change(at,newv);
		t.pr = pr.change(at,newv);
		t.update();
		return t;
	}
}
